using System;
using HW.Core2.Models;
using System.Data.SqlClient;
using System.Collections.Generic;
	
namespace HW.Core2.Repositories
{
	public class SqlSponsorRepository : BaseSqlRepository<Sponsor>
	{
		public SqlSponsorRepository()
		{
		}
		
		public override void Save(Sponsor sponsor)
		{
			string query = @"
INSERT INTO Sponsor(
	SponsorID, 
	Sponsor, 
	Application, 
	ProjectRoundUnitID, 
	SponsorKey, 
	InviteTxt, 
	InviteReminderTxt, 
	LoginTxt, 
	InviteLastSent, 
	InviteReminderLastSent, 
	LoginLastSent, 
	InviteSubject, 
	InviteReminderSubject, 
	LoginSubject, 
	LoginDays, 
	LoginWeekday, 
	LID, 
	TreatmentOffer, 
	TreatmentOfferText, 
	TreatmentOfferEmail, 
	TreatmentOfferIfNeededText, 
	TreatmentOfferBQ, 
	TreatmentOfferBQfn, 
	TreatmentOfferBQmorethan, 
	InfoText, 
	ConsentText, 
	Closed, 
	Deleted, 
	SuperSponsorID, 
	AlternativeTreatmentOfferText, 
	AlternativeTreatmentOfferEmail, 
	SponsorApiKey, 
	AllMessageSubject, 
	AllMessageBody, 
	AllMessageLastSent, 
	ForceLID, 
	MinUserCountToDisclose, 
	EmailFrom, 
	Comment
)
VALUES(
	@SponsorID, 
	@Sponsor, 
	@Application, 
	@ProjectRoundUnitID, 
	@SponsorKey, 
	@InviteTxt, 
	@InviteReminderTxt, 
	@LoginTxt, 
	@InviteLastSent, 
	@InviteReminderLastSent, 
	@LoginLastSent, 
	@InviteSubject, 
	@InviteReminderSubject, 
	@LoginSubject, 
	@LoginDays, 
	@LoginWeekday, 
	@LID, 
	@TreatmentOffer, 
	@TreatmentOfferText, 
	@TreatmentOfferEmail, 
	@TreatmentOfferIfNeededText, 
	@TreatmentOfferBQ, 
	@TreatmentOfferBQfn, 
	@TreatmentOfferBQmorethan, 
	@InfoText, 
	@ConsentText, 
	@Closed, 
	@Deleted, 
	@SuperSponsorID, 
	@AlternativeTreatmentOfferText, 
	@AlternativeTreatmentOfferEmail, 
	@SponsorApiKey, 
	@AllMessageSubject, 
	@AllMessageBody, 
	@AllMessageLastSent, 
	@ForceLID, 
	@MinUserCountToDisclose, 
	@EmailFrom, 
	@Comment
)";
			ExecuteNonQuery(
				query,
				new SqlParameter("@SponsorID", sponsor.SponsorID),
				new SqlParameter("@Sponsor", sponsor.SponsorName),
				new SqlParameter("@Application", sponsor.Application),
				new SqlParameter("@ProjectRoundUnitID", sponsor.ProjectRoundUnitID),
				new SqlParameter("@SponsorKey", sponsor.SponsorKey),
				new SqlParameter("@InviteTxt", sponsor.InviteTxt),
				new SqlParameter("@InviteReminderTxt", sponsor.InviteReminderTxt),
				new SqlParameter("@LoginTxt", sponsor.LoginTxt),
				new SqlParameter("@InviteLastSent", sponsor.InviteLastSent),
				new SqlParameter("@InviteReminderLastSent", sponsor.InviteReminderLastSent),
				new SqlParameter("@LoginLastSent", sponsor.LoginLastSent),
				new SqlParameter("@InviteSubject", sponsor.InviteSubject),
				new SqlParameter("@InviteReminderSubject", sponsor.InviteReminderSubject),
				new SqlParameter("@LoginSubject", sponsor.LoginSubject),
				new SqlParameter("@LoginDays", sponsor.LoginDays),
				new SqlParameter("@LoginWeekday", sponsor.LoginWeekday),
				new SqlParameter("@LID", sponsor.LID),
				new SqlParameter("@TreatmentOffer", sponsor.TreatmentOffer),
				new SqlParameter("@TreatmentOfferText", sponsor.TreatmentOfferText),
				new SqlParameter("@TreatmentOfferEmail", sponsor.TreatmentOfferEmail),
				new SqlParameter("@TreatmentOfferIfNeededText", sponsor.TreatmentOfferIfNeededText),
				new SqlParameter("@TreatmentOfferBQ", sponsor.TreatmentOfferBQ),
				new SqlParameter("@TreatmentOfferBQfn", sponsor.TreatmentOfferBQfn),
				new SqlParameter("@TreatmentOfferBQmorethan", sponsor.TreatmentOfferBQmorethan),
				new SqlParameter("@InfoText", sponsor.InfoText),
				new SqlParameter("@ConsentText", sponsor.ConsentText),
				new SqlParameter("@Closed", sponsor.Closed),
				new SqlParameter("@Deleted", sponsor.Deleted),
				new SqlParameter("@SuperSponsorID", sponsor.SuperSponsorID),
				new SqlParameter("@AlternativeTreatmentOfferText", sponsor.AlternativeTreatmentOfferText),
				new SqlParameter("@AlternativeTreatmentOfferEmail", sponsor.AlternativeTreatmentOfferEmail),
				new SqlParameter("@SponsorApiKey", sponsor.SponsorApiKey),
				new SqlParameter("@AllMessageSubject", sponsor.AllMessageSubject),
				new SqlParameter("@AllMessageBody", sponsor.AllMessageBody),
				new SqlParameter("@AllMessageLastSent", sponsor.AllMessageLastSent),
				new SqlParameter("@ForceLID", sponsor.ForceLID),
				new SqlParameter("@MinUserCountToDisclose", sponsor.MinUserCountToDisclose),
				new SqlParameter("@EmailFrom", sponsor.EmailFrom),
				new SqlParameter("@Comment", sponsor.Comment)
			);
		}
		
		public override void Update(Sponsor sponsor, int id)
		{
			string query = @"
UPDATE Sponsor SET
	SponsorID = @SponsorID,
	Sponsor = @Sponsor,
	Application = @Application,
	ProjectRoundUnitID = @ProjectRoundUnitID,
	SponsorKey = @SponsorKey,
	InviteTxt = @InviteTxt,
	InviteReminderTxt = @InviteReminderTxt,
	LoginTxt = @LoginTxt,
	InviteLastSent = @InviteLastSent,
	InviteReminderLastSent = @InviteReminderLastSent,
	LoginLastSent = @LoginLastSent,
	InviteSubject = @InviteSubject,
	InviteReminderSubject = @InviteReminderSubject,
	LoginSubject = @LoginSubject,
	LoginDays = @LoginDays,
	LoginWeekday = @LoginWeekday,
	LID = @LID,
	TreatmentOffer = @TreatmentOffer,
	TreatmentOfferText = @TreatmentOfferText,
	TreatmentOfferEmail = @TreatmentOfferEmail,
	TreatmentOfferIfNeededText = @TreatmentOfferIfNeededText,
	TreatmentOfferBQ = @TreatmentOfferBQ,
	TreatmentOfferBQfn = @TreatmentOfferBQfn,
	TreatmentOfferBQmorethan = @TreatmentOfferBQmorethan,
	InfoText = @InfoText,
	ConsentText = @ConsentText,
	Closed = @Closed,
	Deleted = @Deleted,
	SuperSponsorID = @SuperSponsorID,
	AlternativeTreatmentOfferText = @AlternativeTreatmentOfferText,
	AlternativeTreatmentOfferEmail = @AlternativeTreatmentOfferEmail,
	SponsorApiKey = @SponsorApiKey,
	AllMessageSubject = @AllMessageSubject,
	AllMessageBody = @AllMessageBody,
	AllMessageLastSent = @AllMessageLastSent,
	ForceLID = @ForceLID,
	MinUserCountToDisclose = @MinUserCountToDisclose,
	EmailFrom = @EmailFrom,
	Comment = @Comment
WHERE SponsorID = @SponsorID";
			ExecuteNonQuery(
				query,
				new SqlParameter("@SponsorID", sponsor.SponsorID),
				new SqlParameter("@Sponsor", sponsor.SponsorName),
				new SqlParameter("@Application", sponsor.Application),
				new SqlParameter("@ProjectRoundUnitID", sponsor.ProjectRoundUnitID),
				new SqlParameter("@SponsorKey", sponsor.SponsorKey),
				new SqlParameter("@InviteTxt", sponsor.InviteTxt),
				new SqlParameter("@InviteReminderTxt", sponsor.InviteReminderTxt),
				new SqlParameter("@LoginTxt", sponsor.LoginTxt),
				new SqlParameter("@InviteLastSent", sponsor.InviteLastSent),
				new SqlParameter("@InviteReminderLastSent", sponsor.InviteReminderLastSent),
				new SqlParameter("@LoginLastSent", sponsor.LoginLastSent),
				new SqlParameter("@InviteSubject", sponsor.InviteSubject),
				new SqlParameter("@InviteReminderSubject", sponsor.InviteReminderSubject),
				new SqlParameter("@LoginSubject", sponsor.LoginSubject),
				new SqlParameter("@LoginDays", sponsor.LoginDays),
				new SqlParameter("@LoginWeekday", sponsor.LoginWeekday),
				new SqlParameter("@LID", sponsor.LID),
				new SqlParameter("@TreatmentOffer", sponsor.TreatmentOffer),
				new SqlParameter("@TreatmentOfferText", sponsor.TreatmentOfferText),
				new SqlParameter("@TreatmentOfferEmail", sponsor.TreatmentOfferEmail),
				new SqlParameter("@TreatmentOfferIfNeededText", sponsor.TreatmentOfferIfNeededText),
				new SqlParameter("@TreatmentOfferBQ", sponsor.TreatmentOfferBQ),
				new SqlParameter("@TreatmentOfferBQfn", sponsor.TreatmentOfferBQfn),
				new SqlParameter("@TreatmentOfferBQmorethan", sponsor.TreatmentOfferBQmorethan),
				new SqlParameter("@InfoText", sponsor.InfoText),
				new SqlParameter("@ConsentText", sponsor.ConsentText),
				new SqlParameter("@Closed", sponsor.Closed),
				new SqlParameter("@Deleted", sponsor.Deleted),
				new SqlParameter("@SuperSponsorID", sponsor.SuperSponsorID),
				new SqlParameter("@AlternativeTreatmentOfferText", sponsor.AlternativeTreatmentOfferText),
				new SqlParameter("@AlternativeTreatmentOfferEmail", sponsor.AlternativeTreatmentOfferEmail),
				new SqlParameter("@SponsorApiKey", sponsor.SponsorApiKey),
				new SqlParameter("@AllMessageSubject", sponsor.AllMessageSubject),
				new SqlParameter("@AllMessageBody", sponsor.AllMessageBody),
				new SqlParameter("@AllMessageLastSent", sponsor.AllMessageLastSent),
				new SqlParameter("@ForceLID", sponsor.ForceLID),
				new SqlParameter("@MinUserCountToDisclose", sponsor.MinUserCountToDisclose),
				new SqlParameter("@EmailFrom", sponsor.EmailFrom),
				new SqlParameter("@Comment", sponsor.Comment)
			);
		}
		
		public override void Delete(int id)
		{
			string query = @"
DELETE FROM Sponsor
WHERE SponsorID = @SponsorID";
			ExecuteNonQuery(
				query,
				new SqlParameter("@SponsorID", id)
			);
		}
		
		public override Sponsor Read(int id)
		{
			string query = @"
SELECT 	SponsorID, 
	Sponsor, 
	Application, 
	ProjectRoundUnitID, 
	SponsorKey, 
	InviteTxt, 
	InviteReminderTxt, 
	LoginTxt, 
	InviteLastSent, 
	InviteReminderLastSent, 
	LoginLastSent, 
	InviteSubject, 
	InviteReminderSubject, 
	LoginSubject, 
	LoginDays, 
	LoginWeekday, 
	LID, 
	TreatmentOffer, 
	TreatmentOfferText, 
	TreatmentOfferEmail, 
	TreatmentOfferIfNeededText, 
	TreatmentOfferBQ, 
	TreatmentOfferBQfn, 
	TreatmentOfferBQmorethan, 
	InfoText, 
	ConsentText, 
	Closed, 
	Deleted, 
	SuperSponsorID, 
	AlternativeTreatmentOfferText, 
	AlternativeTreatmentOfferEmail, 
	SponsorApiKey, 
	AllMessageSubject, 
	AllMessageBody, 
	AllMessageLastSent, 
	ForceLID, 
	MinUserCountToDisclose, 
	EmailFrom, 
	Comment
FROM Sponsor
WHERE SponsorID = @SponsorID";
			Sponsor sponsor = null;
			using (var rs = ExecuteReader(query, new SqlParameter("@SponsorID", id))) {
				if (rs.Read()) {
					sponsor = new Sponsor {
						SponsorID = GetInt32(rs, 0),
						SponsorName = GetString(rs, 1),
						Application = GetString(rs, 2),
						ProjectRoundUnitID = GetInt32(rs, 3),
						SponsorKey = GetGuid(rs, 4),
						InviteTxt = GetString(rs, 5),
						InviteReminderTxt = GetString(rs, 6),
						LoginTxt = GetString(rs, 7),
						InviteLastSent = GetDateTime(rs, 8),
						InviteReminderLastSent = GetDateTime(rs, 9),
						LoginLastSent = GetDateTime(rs, 10),
						InviteSubject = GetString(rs, 11),
						InviteReminderSubject = GetString(rs, 12),
						LoginSubject = GetString(rs, 13),
						LoginDays = GetInt32(rs, 14),
						LoginWeekday = GetInt32(rs, 15),
						LID = GetInt32(rs, 16),
						TreatmentOffer = GetInt32(rs, 17),
						TreatmentOfferText = GetString(rs, 18),
						TreatmentOfferEmail = GetString(rs, 19),
						TreatmentOfferIfNeededText = GetString(rs, 20),
						TreatmentOfferBQ = GetInt32(rs, 21),
						TreatmentOfferBQfn = GetInt32(rs, 22),
						TreatmentOfferBQmorethan = GetInt32(rs, 23),
						InfoText = GetString(rs, 24),
						ConsentText = GetString(rs, 25),
						Closed = GetString(rs, 26),
						Deleted = GetString(rs, 27),
						SuperSponsorID = GetInt32(rs, 28),
						AlternativeTreatmentOfferText = GetString(rs, 29),
						AlternativeTreatmentOfferEmail = GetString(rs, 30),
						SponsorApiKey = GetGuid(rs, 31),
						AllMessageSubject = GetString(rs, 32),
						AllMessageBody = GetString(rs, 33),
						AllMessageLastSent = GetDateTime(rs, 34),
						ForceLID = GetInt32(rs, 35),
						MinUserCountToDisclose = GetInt32(rs, 36),
						EmailFrom = GetString(rs, 37),
						Comment = GetString(rs, 38)
					};
				}
			}
			return sponsor;
		}
		
		public override IList<Sponsor> FindAll()
		{
			string query = @"
SELECT 	SponsorID, 
	Sponsor, 
	Application, 
	ProjectRoundUnitID, 
	SponsorKey, 
	InviteTxt, 
	InviteReminderTxt, 
	LoginTxt, 
	InviteLastSent, 
	InviteReminderLastSent, 
	LoginLastSent, 
	InviteSubject, 
	InviteReminderSubject, 
	LoginSubject, 
	LoginDays, 
	LoginWeekday, 
	LID, 
	TreatmentOffer, 
	TreatmentOfferText, 
	TreatmentOfferEmail, 
	TreatmentOfferIfNeededText, 
	TreatmentOfferBQ, 
	TreatmentOfferBQfn, 
	TreatmentOfferBQmorethan, 
	InfoText, 
	ConsentText, 
	Closed, 
	Deleted, 
	SuperSponsorID, 
	AlternativeTreatmentOfferText, 
	AlternativeTreatmentOfferEmail, 
	SponsorApiKey, 
	AllMessageSubject, 
	AllMessageBody, 
	AllMessageLastSent, 
	ForceLID, 
	MinUserCountToDisclose, 
	EmailFrom, 
	Comment
FROM Sponsor";
			var sponsors = new List<Sponsor>();
			using (var rs = ExecuteReader(query)) {
				while (rs.Read()) {
					sponsors.Add(new Sponsor {
						SponsorID = GetInt32(rs, 0),
						SponsorName = GetString(rs, 1),
						Application = GetString(rs, 2),
						ProjectRoundUnitID = GetInt32(rs, 3),
						SponsorKey = GetGuid(rs, 4),
						InviteTxt = GetString(rs, 5),
						InviteReminderTxt = GetString(rs, 6),
						LoginTxt = GetString(rs, 7),
						InviteLastSent = GetDateTime(rs, 8),
						InviteReminderLastSent = GetDateTime(rs, 9),
						LoginLastSent = GetDateTime(rs, 10),
						InviteSubject = GetString(rs, 11),
						InviteReminderSubject = GetString(rs, 12),
						LoginSubject = GetString(rs, 13),
						LoginDays = GetInt32(rs, 14),
						LoginWeekday = GetInt32(rs, 15),
						LID = GetInt32(rs, 16),
						TreatmentOffer = GetInt32(rs, 17),
						TreatmentOfferText = GetString(rs, 18),
						TreatmentOfferEmail = GetString(rs, 19),
						TreatmentOfferIfNeededText = GetString(rs, 20),
						TreatmentOfferBQ = GetInt32(rs, 21),
						TreatmentOfferBQfn = GetInt32(rs, 22),
						TreatmentOfferBQmorethan = GetInt32(rs, 23),
						InfoText = GetString(rs, 24),
						ConsentText = GetString(rs, 25),
						Closed = GetString(rs, 26),
						Deleted = GetString(rs, 27),
						SuperSponsorID = GetInt32(rs, 28),
						AlternativeTreatmentOfferText = GetString(rs, 29),
						AlternativeTreatmentOfferEmail = GetString(rs, 30),
						SponsorApiKey = GetGuid(rs, 31),
						AllMessageSubject = GetString(rs, 32),
						AllMessageBody = GetString(rs, 33),
						AllMessageLastSent = GetDateTime(rs, 34),
						ForceLID = GetInt32(rs, 35),
						MinUserCountToDisclose = GetInt32(rs, 36),
						EmailFrom = GetString(rs, 37),
						Comment = GetString(rs, 38)
					});
				}
			}
			return sponsors;
		}
	}
}
